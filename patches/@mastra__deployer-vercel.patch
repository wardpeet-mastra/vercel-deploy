diff --git a/dist/index.js b/dist/index.js
index 1781dd86094f2936b1f15c84b1c827cdc1875fd6..2922b587f6613972a995e584e007f5e670298438 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,82 +1,23 @@
-import * as child_process from 'child_process';
-import { readFileSync, writeFileSync, readdirSync } from 'fs';
+import { writeFileSync } from 'fs';
 import { join } from 'path';
 import process from 'process';
 import { Deployer } from '@mastra/deployer';
 
 // src/index.ts
 var VercelDeployer = class extends Deployer {
-  teamSlug;
-  projectName;
-  token;
-  constructor({ teamSlug, projectName, token }) {
+  originalOutputDir;
+  functionOutputDir = join("functions", "index.func");
+  constructor() {
     super({ name: "VERCEL" });
-    this.teamSlug = teamSlug;
-    this.projectName = projectName;
-    this.token = token;
-  }
-  getProjectId({ dir }) {
-    const projectJsonPath = join(dir, "output", ".vercel", "project.json");
-    try {
-      const projectJson = JSON.parse(readFileSync(projectJsonPath, "utf-8"));
-      return projectJson.projectId;
-    } catch {
-      throw new Error("Could not find project ID. Make sure the project has been deployed first.");
-    }
-  }
-  async getTeamId() {
-    const response = await fetch(`https://api.vercel.com/v2/teams`, {
-      headers: {
-        Authorization: `Bearer ${this.token}`
-      }
-    });
-    const res = await response.json();
-    const teams = res.teams;
-    return teams.find((team) => team.slug === this.teamSlug)?.id;
-  }
-  async syncEnv(envVars, { outputDirectory }) {
-    console.log("Syncing environment variables...");
-    const vercelEnvVars = Array.from(envVars.entries()).map(([key, value]) => {
-      if (!key || !value) {
-        throw new Error(`Invalid environment variable format: ${key || value}`);
-      }
-      return {
-        key,
-        value,
-        target: ["production", "preview", "development"],
-        type: "plain"
-      };
-    });
-    try {
-      const projectId = this.getProjectId({ dir: outputDirectory });
-      const teamId = await this.getTeamId();
-      const response = await fetch(
-        `https://api.vercel.com/v10/projects/${projectId}/env?teamId=${teamId}&upsert=true`,
-        {
-          method: "POST",
-          headers: {
-            Authorization: `Bearer ${this.token}`,
-            "Content-Type": "application/json"
-          },
-          body: JSON.stringify(vercelEnvVars)
-        }
-      );
-      if (!response.ok) {
-        const error = await response.json();
-        throw new Error(`Failed to sync environment variables: ${error.message}`);
-      }
-      console.log("\u2713 Successfully synced environment variables");
-    } catch (error) {
-      if (error instanceof Error) {
-        console.error("Failed to sync environment variables:", error.message);
-      } else {
-        console.error("Failed to sync environment variables:", error);
-      }
-      throw error;
-    }
+    this.originalOutputDir = this.outputDir;
+    this.outputDir = "output/.vercel/output";
   }
   async prepare(outputDirectory) {
     await super.prepare(outputDirectory);
+    this.writeVercelJSON(outputDirectory);
+  }
+  async writeInstrumentationFile(outputDirectory) {
+    await super.writeInstrumentationFile(join(outputDirectory, this.functionOutputDir));
   }
   getEntry() {
     return `
@@ -136,72 +77,48 @@ export const OPTIONS = handle(app);
 export const HEAD = handle(app);
 `;
   }
-  writeVercelJSON(outputDirectory, files = ["./*"]) {
+  writeVercelJSON(outputDirectory) {
     writeFileSync(
-      join(outputDirectory, this.outputDir, "vercel.json"),
+      join(outputDirectory, this.outputDir, "config.json"),
+      JSON.stringify({
+        version: 3,
+        routes: [
+          {
+            src: "/(.*)",
+            dest: "/"
+          }
+        ]
+      })
+    );
+  }
+  async bundle(entryFile, outputDirectory, toolsPaths) {
+    const result = await this._bundle(
+      this.getEntry(),
+      entryFile,
+      outputDirectory,
+      toolsPaths,
+      join(outputDirectory, this.outputDir, this.functionOutputDir)
+    );
+    const nodeVersion = process.version?.split(".")?.[0]?.replace("v", "") ?? "22";
+    writeFileSync(
+      join(outputDirectory, this.outputDir, this.functionOutputDir, ".vc-config.json"),
       JSON.stringify(
         {
-          version: 2,
-          installCommand: "npm install --omit=dev",
-          builds: [
-            {
-              src: "index.mjs",
-              use: "@vercel/node",
-              config: { includeFiles: files }
-            }
-          ],
-          routes: [
-            {
-              src: "/(.*)",
-              dest: "index.mjs"
-            }
-          ]
+          handler: "index.mjs",
+          launcherType: "Nodejs",
+          runtime: `nodejs${nodeVersion}.x`,
+          shouldAddHelpers: true
         },
         null,
         2
       )
     );
-  }
-  async bundle(entryFile, outputDirectory, toolsPaths) {
-    const result = await this._bundle(this.getEntry(), entryFile, outputDirectory, toolsPaths);
-    const files = readdirSync(join(outputDirectory, this.outputDir), {
-      recursive: true
-    });
-    const filesWithoutNodeModules = files.filter(
-      (file) => typeof file === "string" && !file.startsWith("node_modules")
-    );
-    this.writeVercelJSON(outputDirectory, filesWithoutNodeModules);
     return result;
   }
-  async deploy(outputDirectory) {
-    const envVars = await this.loadEnvVars();
-    const commandArgs = [
-      "--scope",
-      this.teamSlug,
-      "--cwd",
-      join(outputDirectory, this.outputDir),
-      "--token",
-      this.token,
-      "deploy",
-      "--yes",
-      ...this.projectName ? ["--name", this.projectName] : []
-    ];
-    child_process.execSync(`npx vercel ${commandArgs.join(" ")}`, {
-      cwd: join(outputDirectory, this.outputDir),
-      env: {
-        PATH: process.env.PATH
-      },
-      stdio: "inherit"
-    });
-    this.logger.info("Deployment started on Vercel. You can wait for it to finish or exit this command.");
-    if (envVars.size > 0) {
-      await this.syncEnv(envVars, { outputDirectory });
-    } else {
-      this.logger.info("\nAdd your ENV vars to .env or your vercel dashboard.\n");
-    }
+  async deploy() {
+    this.logger?.info("Deploying to Vercel is deprecated. Please use the Vercel dashboard to deploy.");
   }
   async lint(entryFile, outputDirectory, toolsPaths) {
-    await super.lint(entryFile, outputDirectory, toolsPaths);
     await super.lint(entryFile, outputDirectory, toolsPaths);
     const hasLibsql = await this.deps.checkDependencies(["@mastra/libsql"]) === `ok`;
     if (hasLibsql) {
